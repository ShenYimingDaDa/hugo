<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sym的博客</title>
    <link>https://shenyimingdada.github.io/</link>
    <description>Recent content on sym的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 10 Mar 2015 00:13:27 +0000</lastBuildDate>
    
	<atom:link href="https://shenyimingdada.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>test</title>
      <link>https://shenyimingdada.github.io/first.html</link>
      <pubDate>Fri, 18 Dec 2020 21:55:00 +0800</pubDate>
      
      <guid>https://shenyimingdada.github.io/first.html</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（五）| 接收数组和 Map</title>
      <link>https://shenyimingdada.github.io/2019/12/18/golang-gin-query-parameters-array-map.html</link>
      <pubDate>Wed, 18 Dec 2019 21:55:00 +0800</pubDate>
      
      <guid>https://shenyimingdada.github.io/2019/12/18/golang-gin-query-parameters-array-map.html</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（三）| 路由参数</title>
      <link>https://shenyimingdada.github.io/post/2019-12-13-golang-gin-parameters-in-path/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://shenyimingdada.github.io/post/2019-12-13-golang-gin-parameters-in-path/</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>Golang Gin 实战（三）| 路由参数</title>
      <link>https://shenyimingdada.github.io/post/2019-12-15-golang-gin-query-parameters-source-code-analysis/</link>
      <pubDate>Fri, 13 Dec 2019 21:00:00 +0800</pubDate>
      
      <guid>https://shenyimingdada.github.io/post/2019-12-15-golang-gin-query-parameters-source-code-analysis/</guid>
      <description>标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容 标题 段落内容</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://shenyimingdada.github.io/about/</link>
      <pubDate>Tue, 10 Mar 2015 00:13:27 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/about/</guid>
      <description>《Go 实战笔记》系列作者，《Golang Gin 实战》系列作者，《Android Gradle权威指南》作者，现负责技术管理。 Android Gradle权威指南 公众号，扫码关注</description>
    </item>
    
    <item>
      <title></title>
      <link>https://shenyimingdada.github.io/post/Fabirc-Explorer%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/post/Fabirc-Explorer%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/</guid>
      <description>基于Fabric 1.4.2 搭建 BlockChain-Explorer(cii-badge分支) 1.环境依赖说明 nodejs 8.11.x (对于版本9.x还不支持) PostgreSQL 9.5 以上 JQ，jq 是一个轻量级且灵活的命令行JSON处理器 Git gcc-c++ 已经验证的Docker环境支持版本 Docker CE 18.09.2 or later Docker Compose 1.14.0 注：测试环境为CentOS Linux release 7.4.1708 (Core) 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://shenyimingdada.github.io/post/Fabric-CA%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/post/Fabric-CA%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>Fabric CA 的介绍及使用 Fabric CA 简介 Fabric CA 是 Fabric 的证书颁发管理机构，原来是 Fabric 内的 MemberService 组件，后来独立成子项目，主要实现下面几个功能： 负责 Fabric 网络内所有实体(Identity)的身份管理，包括身份的注册和注销 负责证书管理，包括注册证书(ECerts)和交易证书(TCerts)等的发放和注销 服务端支持基于</description>
    </item>
    
    <item>
      <title></title>
      <link>https://shenyimingdada.github.io/post/Fabric1.4.2%E7%9A%84%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/post/Fabric1.4.2%E7%9A%84%E6%90%AD%E5%BB%BA%E6%96%87%E6%A1%A3/</guid>
      <description>基于CentOS 7 搭建 Fabric1.4.2 区块链环境 1. 下载CentOS 7 镜像 下载地址：http://isoredirect.centos.org/centos/7/isos/x86_64/ 网易源镜像地址：http://mirrors.163.com/centos/7.6.1810/isos/x86</description>
    </item>
    
    <item>
      <title></title>
      <link>https://shenyimingdada.github.io/post/Fabric%E4%B8%AD%E5%8A%A8%E6%80%81%E5%8A%A0%E5%85%A5%E8%8A%82%E7%82%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/post/Fabric%E4%B8%AD%E5%8A%A8%E6%80%81%E5%8A%A0%E5%85%A5%E8%8A%82%E7%82%B9/</guid>
      <description>Fabric 中动态加入节点 注：测试 Fabric 版本为 1.4.2；测试网络配置为first-network 1. 启动测试网络 首先我们需要进入first-network文件夹下，启动测试网络： 1 2 3 4 # 进入 first-network 文件夹 cd /opt/gopath/src/github.com/hyperledger/fabric/scripts/fabric-samples/first-network/ # 启动网络 ./byfn.sh up 2. 修改crypto-config.yaml文件 网络启动完成后，我们就可以来测</description>
    </item>
    
    <item>
      <title></title>
      <link>https://shenyimingdada.github.io/post/%E5%9C%A8Fabric1.4.2%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%88%86%E6%9E%90Raft%E5%85%B1%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/post/%E5%9C%A8Fabric1.4.2%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%B9%B6%E5%88%86%E6%9E%90Raft%E5%85%B1%E8%AF%86/</guid>
      <description>在Fabric 1.4.2 中使用并分析 Raft 共识 1. 前言 Raft是在Fabric 1.4.1版本中推出的继solo和kafka之后的一个新的共识插件，相比于kafka而言，Raft更加简单方便，更加适用于在生产环境中使用。 2. 共识机制简介 共识(consensus)在很多时候会与一致性(consist</description>
    </item>
    
    <item>
      <title>Fabric 中动态加入组织</title>
      <link>https://shenyimingdada.github.io/%E4%BD%BF%E7%94%A8Chaincode%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E8%B0%83%E8%AF%95%E9%93%BE%E7%A0%81.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/%E4%BD%BF%E7%94%A8Chaincode%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E8%B0%83%E8%AF%95%E9%93%BE%E7%A0%81.html</guid>
      <description>注：测试 Fabric 版本为 1.4.2；测试网络配置为first-network 1. 启动测试网络 首先我们需要进入first-network文件夹下，启动测试网络： 1 2 3 4 5 # 进入 first-network 文件夹 cd /opt/gopath/src/github.com/hyperledger/fabric/scripts/fabric-samples/first-network/ # 启动网络 ./byfn.sh up 2. 为新组织生成证书 其实first-network直接提供了添加新组织的脚本和配置文件，这里</description>
    </item>
    
    <item>
      <title>使用 Chaincode 开发模式调试链码</title>
      <link>https://shenyimingdada.github.io/%E4%BD%BF%E7%94%A8Chaincode%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E8%B0%83%E8%AF%95%E9%93%BE%E7%A0%81.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/%E4%BD%BF%E7%94%A8Chaincode%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E8%B0%83%E8%AF%95%E9%93%BE%E7%A0%81.html</guid>
      <description>Fabirc 提供了链码的开发模式，使链码在开发阶段可以进行非常快速的开发、构建、运行、调试。具体步骤如下： 将已经编写好的chaincode 拷贝到 /opt/gopath/src/github.com/hyperledger/fabric/scripts/fabric-samples/chai</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://shenyimingdada.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>手动启动 Fabric 1.4.2 并解析全过程</title>
      <link>https://shenyimingdada.github.io/%E4%BD%BF%E7%94%A8Chaincode%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E8%B0%83%E8%AF%95%E9%93%BE%E7%A0%81.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/%E4%BD%BF%E7%94%A8Chaincode%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E8%B0%83%E8%AF%95%E9%93%BE%E7%A0%81.html</guid>
      <description>注：以基于docker容器的方式启动；测试网络为 first-network，所以各种配置文件可以不用创建和修改即可使用；网络模式为 solo 1. 生成组织关系和身份证书 Fabric 项目提供了 cryptogen 工具（基于 crypto 标准库）实现自动化生成各个组织、节点和用户成员的身份证书文件。这一过程需要依赖于crypto-co</description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://shenyimingdada.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shenyimingdada.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>